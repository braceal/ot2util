from typing import Dict, Union

import cv2
from pydantic import BaseModel
from fastapi import FastAPI, Response
from fastapi.responses import JSONResponse

app = FastAPI()


class ErrorResponse(BaseModel):
    Error: str


@app.get("/")
def read_root() -> JSONResponse:
    return {"message": "Server to capture and send images from RaspberryPi on top of OT2"}


@app.get("/status")
def status() -> JSONResponse:
    cap = cv2.VideoCapture(0)  # initialize camera with ID 0
    ret, _ = cap.read()  # read one frame, first value it return code
    cap.release()  # release the VideoCapture object.

    if ret:
        return {"message": "Camera with id 0 is operating normally"}
    else:
        return {"message": "Camera with ID 0 is not operating normally"}


@app.get("/status/{camera_id}")
def status_specific_ID(camera_id: int) -> JSONResponse:
    cap = cv2.VideoCapture(camera_id)  # initialize camera with requested id
    ret, _ = cap.read()  # read one frame, first value it return code
    cap.release()  # release the VideoCapture object.

    if ret:
        return {"message": "Camera with id 0 is operating normally"}
    else:
        return {"message": "Camera with ID 0 is not operating normally"}


@app.get(
    "/get_image",
    # Allows me to return a json response or the image
    response_model=ErrorResponse,
    # Set what the media type will be in the autogenerated OpenAPI specification.
    # fastapi.tiangolo.com/advanced/additional-responses/#additional-media-types-for-the-main-response
    responses={
        200: {"content": {"image/png": {}}, "description": "Return the image or a json string with an error message"},
        512: {"model": ErrorResponse, "description": "Picture failed with default camera ID"},
    },
    # Prevent FastAPI from adding "application/json" as an additional
    # response media type in the autogenerated OpenAPI specification.
    # https://github.com/tiangolo/fastapi/issues/3258
    response_class=Response,
)
def get_image() -> Response:
    cap = cv2.VideoCapture(0)  # initialize camera with id 0
    ret, frame = cap.read()  # read one frame, first value it return code
    cap.release()  # release the VideoCapture object.
    if ret:
        _, img_encode = cv2.imencode(".png", frame)
        img_encode = img_encode.tobytes()

        return Response(content=img_encode, media_type="image/png")
    else:
        return JSONResponse(status_code=512, content={"Error": "Error capturing photo with camera ID 0"})


@app.get(
    "/get_image/{camera_id}",
    # Allows me to return a json response or the image
    response_model=ErrorResponse,
    # Set what the media type will be in the autogenerated OpenAPI specification.
    # fastapi.tiangolo.com/advanced/additional-responses/#additional-media-types-for-the-main-response
    responses={
        200: {"content": {"image/png": {}}, "description": "Return the image or a json string with an error message"},
        512: {"model": ErrorResponse, "description": "Picture failed with camera id requested"},
    },
    # Prevent FastAPI from adding "application/json" as an additional
    # response media type in the autogenerated OpenAPI specification.
    # https://github.com/tiangolo/fastapi/issues/3258
    response_class=Response,
)
def get_image_specific_id(camera_id: int) -> Union[Response, Dict[str, str]]:
    cap = cv2.VideoCapture(camera_id)  # initialize camera with requested id
    ret, frame = cap.read()  # read one frame
    cap.release()  # release the VideoCapture object.
    if ret:
        _, img_encode = cv2.imencode(".png", frame)
        img_encode = img_encode.tobytes()

        return Response(content=img_encode, media_type="image/png")

    else:
        return JSONResponse(status_code=512, content={"Error": f"Error capturing photo with camera ID: {camera_id}"})
